" set showtabline=1
" if has('termguicolors') && (has('mac') || has('win32'))
  set termguicolors
" endif
set nu relativenumber
" set cursorline
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set numberwidth=5
set signcolumn=yes
set autoindent
set clipboard=unnamed
let mapleader = ","
set encoding=utf-8
set updatetime=100
set laststatus=2
set hidden
set splitright
set shell=/bin/fish
set shortmess+=TasS
" set foldmethod=indent

filetype plugin on
filetype indent on
" disable vi compatibility
if &compatible
  set nocompatible
endif

" Search down into a whitelist of subfolders
" Provides tab-completion for all file-related tasks
func! SetPath()
  let path_list = systemlist('find . -maxdepth 1 ! -path "./.*" ! -path "./target" ! -path "./bin" ! -path "./build" ! -path "./*.egg-info" ! -path "__pycache__" -type d')
  let paths = map(path_list, {_, val -> val != "." ? val[2:] . "/**" : val})
  return join(paths, ",")
endfunc
execute "set path=,," . SetPath()

" Display all matching files when we tab complete
set wildmenu wildignorecase
set wildignore+=*.egg-info/**,.*,**/__pycache__/**,*.o,*.obj,*.bak,*.exe,*.swp,tags
if has("patch-8.2.4325")
  set wildoptions+=pum,fuzzy
endif
" better looking diff
if has("patch-8.1.0360")
    set diffopt+=internal,algorithm:patience
endif
set fillchars=vert:â”‚
set sessionoptions=buffers,curdir,tabpages,winsize
" Saving options in session and view files causes more problems than it
" solves, so disable it.
set sessionoptions-=options
set viewoptions-=options

" Make the escape key more responsive by decreasing the wait time for an
" escape sequence (e.g., arrow keys).
set ttimeout
set ttimeoutlen=100
" incremental search
set incsearch ignorecase smartcase
set scrolloff=4
" Disable a legacy behavior that can break plugin maps.
set nolangremap
set undofile
" Setup data dirs
let g:vimdata = expand("~/.local/share/") . 'vim-data'
if !isdirectory(g:vimdata)
  call mkdir(g:vimdata, "p")
endif
let &directory=g:vimdata . '/swap//'
let &backupdir=g:vimdata . '/backup//'
let &undodir=g:vimdata . '/undo//'
if !isdirectory(&undodir)
  call mkdir(&undodir, "p")
endif
if !isdirectory(&backupdir)
  call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
  call mkdir(&directory, "p")
endif
" let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'

" tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
" netrw_gitignore#Hide() causes netrw to be super slow on big repo
" let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide=',\(^\|\s\s\)\zs\.\S\+'


set background=dark
syntax on

" Builtin grep
if executable('rg')
  set grepprg=rg\ --column\ --no-heading\ --smart-case\ -g\ \"!*.ipynb\"
else
  set grepprg=grep\ --color=never\ -REHInsi\ --exclude-dir=\"*.git*\"\ --exclude=\"*.swp\"\ --exclude=\"*.zwc\"\ --exclude=\"*.pyc\"\ --exclude=\"*.pyo\"\ --exclude=\"*.ipynb\"\ --exclude-dir=\"*.*_cache*\"\ --exclude-dir=\"target\"\ --exclude-dir=\"build\"
endif

" Useful tips
" merging 2 blocks of line, put cursor on last line of first block and do :1,g/^/''+m.|-j!

" disable Background Color Erase
let &t_ut=''

" use tab to trigger omnifunc competion
" inoremap <Tab> <C-X><C-O>
" set omnifunc=syntaxcomplete#Complete
set completeopt=menuone,preview

" set wildmode=list:lastused
set wildcharm=<C-Z>

" Add plugin
packadd! comment
packadd! lsp
packadd! vim-fugitive
packadd! vim-gitgutter
packadd! copilot.vim
packadd! devdocs.vim
" packadd scope.vim
let g:vimspector_enable_mappings = 'HUMAN'
packadd! vimspector
